<?php/*  ------------------------------------------------------------------------  Copyright (C) 2014 Bart Orriens, Albert Weerman  This library/program is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.  You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  ------------------------------------------------------------------------ *///FULL QUESTION GOES THROUG THIS SURVEY BEFORE OUTPUT TO THE SCREENfunction lastParse($str) {    $patterns = array('/((?i)\[IWER:(.*?)])/s');    $replace = array('<br/><div class="alert alert-info" role="alert"><b>\2</b></div>');    $str = preg_replace($patterns, $replace, $str);    return $str;}// allows to never have certain variables set to dirty on going backfunction getDefaultCleanVariables() {    return array(    );}function calcAge($year, $month, $day) {    if ($year == '') {        return null;    }    if ($month == '') {        $month = 6;    }    if ($day == '') {        $day = 15;    }    $age = floor((strtotime(date('Y-m-d')) - strtotime($year . '-' . $month . '-' . $day)) / 31556926);    return $age;}function displayInOtherLanguage() {    global $engine;    $display = $engine->getDisplayObject();    $old = getSurveyLanguage();    setSessionParameter(SESSION_PARAM_LANGUAGE, 1);    setSessionParameter(SESSION_PARAM_NEWLANGUAGE, null);    $str = "<div id='uscic-otherlanguageview' class='uscic-wrap'><div class='container'>";    $str .= '<ul class="nav nav-tabs" role="tablist">  <li class="active"><a data-toggle="tab" role="tab" href="#english">English</a></li>  <li role="presentation" class=""><a href="#">Dutch</a></li></ul>';    $vars = $engine->getDisplayed();    $display->setLastParse(false);    $display->setShowHeader(false);    $display->setShowFooter(false);    $engine->setRedoFills(true);    $str .= "<div class='tab-content'><div id='english' class='tab-pane active'><div class='outershield'><div class='shield'></div>";    $str .= $display->showQuestion($vars, $engine->getRgid(), $engine->getTemplate());    $str .= "</div></div></div>";    $str .= "</div></div>";    $str .= "<script type='text/javascript'>";    $str .= "$(document).ready(function() {                  var bottom = $('#uscic-mainpanel').position().top+$('#uscic-mainpanel').outerHeight(true);            $('#uscic-otherlanguageview').css('position', 'absolute');            $('#uscic-otherlanguageview').css('left', $('#uscic-mainpanel').position().left);            $('#uscic-otherlanguageview').css('width', $('#uscic-mainpanel').width());                        $('#uscic-otherlanguageview').css('top', bottom+50);            });";    $str .= "</script>";    setSessionParameter(SESSION_PARAM_LANGUAGE, $old);    // do this here since we don't call lastparse    $patterns = array('/((?i)\[IWER:(.*?)])/s');    $replace = array('<br/><div class="alert alert-info" role="alert"><b>\2</b></div>');    $str = preg_replace($patterns, $replace, $str);    return $str;}/* ALWAYS TO BE PRESENT */// function to store answers in more than just the _data table// the destination table should have the same format as the _data table// this function is called in variable.php, storeAnswer if presentfunction storeAnswerExtra($queryparams, $queryvalues, $bp) {    }function processGrid() {    global $engine;    $grid = $engine->getAnswer("hhgrid");    if ($grid == "") {        $grid = "[]";    }    $gridentries = json_decode($grid);    $currentnumber = $engine->getAnswer("hhmembernumber");    // first time OR more members now    if (inArray($currentnumber, array(null, "")) || $currentnumber < sizeof($gridentries)) {        $currentnumber = sizeof($gridentries);    }    // check if there is data!    $data = array();    for ($u = 1; $u < 15; $u++) {        if (isset($_POST["hhGrid_hhmemberfirstname_" . $u])) {            $arr = array();            $arr[] = $_POST["hhGrid_hhmemberfirstname_" . $u];            $arr[] = $_POST["hhGrid_hhmemberlastname_" . $u];            $arr[] = $_POST["hhGrid_hhmembergender_" . $u];            $arr[] = $_POST["hhGrid_hhmemberbirthmonth_" . $u];            $arr[] = $_POST["hhGrid_hhmemberbirthday_" . $u];            $arr[] = $_POST["hhGrid_hhmemberbirthyear_" . $u];            $arr[] = $_POST["hhGrid_hhmemberrelationship_" . $u];            $data[] = implode(",", $arr);        }    }    //echo implode("~",$data);    // update hhmember number    $engine->setAnswer("griddata", implode("~", $data));    $engine->setAnswer("gridfilled", loadvar("gridfilled"));    $engine->setAnswer("hhmembernumber", sizeof($gridentries));    // update fields --> seems to work, but not showing yet --> array update perhaps!    for ($i = 1; $i <= $currentnumber; $i++) {        // we lost entries, and so we need to clear the other ones we had        if ($i > sizeof($gridentries)) {            $engine->setAnswer("hhmemberfirstname[" . $i . ']', null);            $engine->setAnswer("hhmemberlastname[" . $i . ']', null);            $engine->setAnswer("hhmemberage[" . $i . ']', null);            $engine->setAnswer("hhmemberdateofbirth_day[" . $i . ']', null);            $engine->setAnswer("hhmemberdateofbirth_month[" . $i . ']', null);            $engine->setAnswer("hhmemberdateofbirth_year[" . $i . ']', null);            $engine->setAnswer("hhmembergender[" . $i . ']', null);            $engine->setAnswer("hhmemberrelationship[" . $i . ']', null);            $engine->setAnswer("hhmemberrelationship_other[" . $i . ']', null);            $engine->setAnswer("hhmemberactive[" . $i . ']', null);        }        // entry!        else {            $entry = $gridentries[$i - 1]; // start at 0!            $engine->setAnswer("hhmemberfirstname[" . $i . ']', $entry->hhmemberfirstname);            $engine->setAnswer("hhmemberlastname[" . $i . ']', $entry->hhmemberlastname);            $engine->setAnswer("hhmemberdateofbirth_day[" . $i . ']', $entry->hhmemberbirthday);            $engine->setAnswer("hhmemberdateofbirth_month[" . $i . ']', $entry->hhmemberbirthmonth);            $engine->setAnswer("hhmemberdateofbirth_year[" . $i . ']', $entry->hhmemberbirthyear);            $age = floor((strtotime(date('Y-m-d')) - strtotime($entry->hhmemberbirthyear . '-' . $entry->hhmemberbirthmonth . '-' . $entry->hhmemberbirthday)) / 31556926);            $engine->setAnswer("hhmemberage[" . $i . ']', $age);            $engine->setAnswer("hhmembergender[" . $i . ']', $entry->hhmembergender);            $engine->setAnswer("hhmemberrelationship[" . $i . ']', $entry->hhmemberrelationship);            $engine->setAnswer("hhmemberrelationship_other[" . $i . ']', $entry->hhmemberrelationship_other);            $engine->setAnswer("hhmemberactive[" . $i . ']', 1); // active!        }    }    //print_r($engine->getAnswer("hhmembername"));}function processGridChange() {    //echo 'yyyy';    global $engine;    $grid = $engine->getAnswer("hhgrid_changed");    if ($grid == "") {        $grid = "[]";    }    $gridentries = json_decode($grid);    $currentnumber = $engine->getAnswer("hhmembernumber");    for ($i = 1; $i <= $currentnumber; $i++) {        $entry = $gridentries[$i - 1]; // start at 0!        $engine->setAnswer("hhmemberchanged[" . $i . ']', $entry->hhmemberchanged);    }}function processGridAdditions() {    global $engine;    $grid = $engine->getAnswer("hhgrid_new");    if ($grid == "") {        $grid = "[]";    }    $gridentries = json_decode($grid);    $existingnumber = $engine->getAnswer("hhmembernumber");    $newnumber = $engine->getAnswer("newhhmembernumber");    // first time OR more members now    if (inArray($newnumber, array(null, "")) || $newnumber < sizeof($gridentries)) {        $newnumber = sizeof($gridentries);    }    $data = array();    for ($u = 1; $u < 15; $u++) {        if (isset($_POST["hhGrid_hhmemberfirstname_" . $u])) {            $arr = array();            $arr[] = $_POST["hhGrid_hhmemberfirstname_" . $u];            //$arr[] = $_POST["hhGrid_hhmemberlastname_" . $u];            $arr[] = $_POST["hhGrid_hhmembergender_" . $u];            $arr[] = $_POST["hhGrid_hhmemberbirthmonth_" . $u];            //$arr[] = $_POST["hhGrid_hhmemberbirthday_" . $u];            $arr[] = $_POST["hhGrid_hhmemberbirthyear_" . $u];            $arr[] = $_POST["hhGrid_hhmemberrelationship_" . $u];            $data[] = implode(",", $arr);        }    }    $engine->setAnswer("newgriddata", implode("~", $data));    //echo implode("~",$data);    // update new hhmember number    $engine->setAnswer("newgridfilled", loadvar("newgridfilled"));    // update new hhmember number    $engine->setAnswer("newhhmembernumber", sizeof($gridentries));    // update fields --> seems to work, but not showing yet --> array update perhaps!    for ($i = 1; $i <= $newnumber; $i++) {        $storeindex = $existingnumber + $i;        // we lost entries, and so we need to clear the other ones we had        if ($i > sizeof($gridentries)) {            $engine->setAnswer("hhmemberfirstname[" . $storeindex . ']', null);            $engine->setAnswer("hhmemberlastname[" . $storeindex . ']', null);            $engine->setAnswer("hhmemberage[" . $storeindex . ']', null);            $engine->setAnswer("hhmemberdateofbirth_day[" . $storeindex . ']', null);            $engine->setAnswer("hhmemberdateofbirth_month[" . $storeindex . ']', null);            $engine->setAnswer("hhmemberdateofbirth_year[" . $storeindex . ']', null);            $engine->setAnswer("hhmembergender[" . $storeindex . ']', null);            $engine->setAnswer("hhmemberrelationship[" . $storeindex . ']', null);            $engine->setAnswer("hhmemberrelationship_other[" . $storeindex . ']', null);            $engine->setAnswer("hhmemberactive[" . $storeindex . ']', null);        }        // entry!        else {            $entry = $gridentries[$i - 1]; // start at 0!            //print_r($entry);            $engine->setAnswer("hhmemberfirstname[" . $storeindex . ']', $entry->hhmemberfirstname);            $engine->setAnswer("hhmemberlastname[" . $storeindex . ']', $entry->hhmemberlastname);            $engine->setAnswer("hhmemberdateofbirth_day[" . $storeindex . ']', $entry->hhmemberbirthday);            $engine->setAnswer("hhmemberdateofbirth_month[" . $storeindex . ']', $entry->hhmemberbirthmonth);            $engine->setAnswer("hhmemberdateofbirth_year[" . $storeindex . ']', $entry->hhmemberbirthyear);            $age = floor((strtotime(date('Y-m-d')) - strtotime($entry->hhmemberbirthyear . '-' . $entry->hhmemberbirthmonth . '-' . $entry->hhmemberbirthday)) / 31556926);            //echo $age;            $engine->setAnswer("hhmemberage[" . $storeindex . ']', $age);            $engine->setAnswer("hhmembergender[" . $storeindex . ']', $entry->hhmembergender);            $engine->setAnswer("hhmemberrelationship[" . $storeindex . ']', $entry->hhmemberrelationship);            $engine->setAnswer("hhmemberrelationship_other[" . $storeindex . ']', $entry->hhmemberrelationship_other);            $engine->setAnswer("hhmemberactive[" . $storeindex . ']', 1); // active!        }    }}function clearGrid() {    global $engine;    $currentnumber = $engine->getAnswer("hhmembernumber");    // // clear all entries    for ($i = 1; $i <= $currentnumber; $i++) {        // we clear all entries, since we said no one else        $engine->setAnswer("hhmemberfirstname[" . $i . ']', null);        $engine->setAnswer("hhmemberlastname[" . $i . ']', null);        $engine->setAnswer("hhmemberage[" . $i . ']', null);        $engine->setAnswer("hhmemberdateofbirth_day[" . $i . ']', null);        $engine->setAnswer("hhmemberdateofbirth_month[" . $i . ']', null);        $engine->setAnswer("hhmemberdateofbirth_year[" . $i . ']', null);        $engine->setAnswer("hhmembergender[" . $i . ']', null);        $engine->setAnswer("hhmemberrelationship[" . $i . ']', null);        $engine->setAnswer("hhmemberrelationship_other[" . $i . ']', null);        $engine->setAnswer("hhmemberactive[" . $i . ']', null);    }    $engine->setAnswer("hhmembernumber", null);    $engine->setAnswer("hhgrid", null);}function clearGridAdditions() {    global $engine;    $existingnumber = $engine->getAnswer("hhmembernumber");    $newnumber = $engine->getAnswer("newhhmembernumber");    // // clear all entries    for ($i = ($existingnumber + 1); $i <= ($existingnumber + $currentnumber); $i++) {        // we clear all entries, since we said no one else        $engine->setAnswer("hhmemberfirstname[" . $i . ']', null);        $engine->setAnswer("hhmemberlastname[" . $i . ']', null);        $engine->setAnswer("hhmemberage[" . $i . ']', null);        $engine->setAnswer("hhmemberdateofbirth_day[" . $i . ']', null);        $engine->setAnswer("hhmemberdateofbirth_month[" . $i . ']', null);        $engine->setAnswer("hhmemberdateofbirth_year[" . $i . ']', null);        $engine->setAnswer("hhmembergender[" . $i . ']', null);        $engine->setAnswer("hhmemberrelationship[" . $i . ']', null);        $engine->setAnswer("hhmemberrelationship_other[" . $i . ']', null);        $engine->setAnswer("hhmemberactive[" . $i . ']', null);    }    $engine->setAnswer("newhhmembernumber", null);    $engine->setAnswer("hhgrid_existing", null);    $engine->setAnswer("hhgrid_new", null);}function send_email($fromaddress, $toaddress, $subject, $message) {    $headers = 'From: ' . $fromaddress . "\r\n" .            'Reply-To: ' . $fromaddress . "\r\n" .            'Return-Path: <>' . "\r\n" .            'X-Mailer: PHP/' . phpversion() . "\r\n";    $headers .= "MIME-Version: 1.0" . "\r\n";    //$headers .= "Content-type: text/plain; charset=ISO-8859-1";        $headers .= "Content-Type: text/html; charset=ISO-8859-1\r\n";    $arr = explode(";", $toaddress);    foreach ($arr as $a) {        mail($a, $subject, $message, $headers);    }}/* myhh functions */function getHHInfoPreload() {    global $engine;    $household = new Household($engine->getPrimaryKey());    $respondents = $household->getRespondents();    $cnt = 1;    foreach ($respondents as $respondent) {        $engine->setAnswer('HHMemberName[' . $cnt . ']', $respondent->getName());        $engine->setAnswer('HHMemberPrimkey[' . $cnt . ']', $respondent->getPrimkey());        $engine->setAnswer('HHMemberAge[' . $cnt . ']', $respondent->getAge());        $engine->setAnswer('HHMemberSex[' . $cnt . ']', $respondent->getSex());        $engine->setAnswer('HHMemberPermanent[' . $cnt . ']', $respondent->getPermanent());        $cnt++;    }    $engine->setAnswer('HHmembers', sizeof($respondents));}function getIndividualInfoPreload() {    global $engine;    $respondent = new Respondent($engine->getPrimaryKey());    $household = $respondent->getHousehold();    $respondents = $household->getRespondents();    $cnt = 1;    foreach ($respondents as $respondentL) {        if ($respondentL->isPresent()) { //don't add the moved out and died            $engine->setAnswer('HHMemberName[' . $cnt . ']', $respondentL->getName());            $engine->setAnswer('HHMemberPrimkey[' . $cnt . ']', $respondentL->getPrimkey());            $engine->setAnswer('HHMemberAge[' . $cnt . ']', $respondentL->getAge());            $engine->setAnswer('HHMemberSex[' . $cnt . ']', $respondentL->getSex());            $engine->setAnswer('HHMemberPermanent[' . $cnt . ']', $respondent->getPermanent());        }        $cnt++;    }    $engine->setAnswer('HHmembers', sizeof($respondents));    $engine->setAnswer('RAge', $respondent->getAge());    $engine->setAnswer('RSex', $respondent->getSex());    $engine->setAnswer('RName', $respondent->getName());    $engine->setAnswer('RBirthMonth', $respondent->getBirthMonth());    $engine->setAnswer('RBirthYear', $respondent->getBirthYear());    $engine->setAnswer('RConsentType', $respondent->getConsentType());    $engine->setAnswer('familyR', $respondent->getFamR());    $engine->setAnswer('financialR', $respondent->getFinR());    $engine->setAnswer('selected', $respondent->getSelected());}function getVisionTestModalStart() {    return '<div class="modal fade bs-example-modal-lg" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">  <div class="modal-dialog" style="width:1000px;">    <div class="modal-content">      <div class="modal-header">        <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>      </div>      <div class="modal-body">      <table width=100%" style="height:500px" ><tr><td align=center>';}function getVisionTestModalEnd() {    return '</td></tr></table>      </div>    </div>  </div></div><script type="text/javascript">    $(window).load(function(){        $("#myModal").modal("show");    });</script>';}// todo: adjust this to match with dkrfna names used in basicengine.php for storage//       change setting to have individual dk/rf/na inline or at bottom (add to displayquestion.php there)function bottomDKRFNA() {//return "";    $str = "";    $str .= "<hr><div style=''><center><h3>Individual DK/RF</h3>";    global $engine, $survey;    $str .= "<br/><br/><table><tr><td>DK: </td>";    $str .= '<td><select multiple name="dk_list"' . ' id="dk_list" class="selectpicker show-tick">';    $answernumbers = $engine->getDisplayNumbers();    $display = $engine->getDisplayObject();    $displayed = explode("~", $display->getRealVariables(explode("~", $engine->getDisplayed())));    if (sizeof($displayed) == 1) {        return "";    }    $cnt = 0;    foreach ($displayed as $a) {        if (!$engine->isInlineField($a)) {            $cnt++;        }    }    if ($cnt == 1) {        return "";    }    foreach ($displayed as $a) {        if ($engine->isInlineField($a)) {            continue;        }        $var = $engine->getVariableDescriptive($a);        $id = "" . $answernumbers[strtoupper($a)];        $answertype = $var->getAnswerType();        if ($answertype == ANSWER_TYPE_NONE) {            continue;        }        if (inArray($answertype, array(ANSWER_TYPE_SETOFENUMERATED))) {            $id .= "_name[]";        } else if (inArray($answertype, array(ANSWER_TYPE_MULTIDROPDOWN))) {            $id .= "[]";        }        $ans = $engine->getAnswer($a);        $selected = "";        if (strtoupper($ans) == "DK") {            $selected = "selected";        }        $str .= "<option " . $selected . " value='" . $id . "'>" . $a . " (" . substr($var->getQuestion(), 0, 40) . ")</option>";    }    $str .= "</select></td></tr>";    $str .= '<tr><td>RF: </td><td><select multiple name="rf_list"' . ' id="rf_list" class="selectpicker show-tick">';    $answernumbers = $engine->getDisplayNumbers();    $display = $engine->getDisplayObject();    $displayed = explode("~", $display->getRealVariables(explode("~", $engine->getDisplayed())));    $scripts = array();    foreach ($displayed as $a) {        if ($engine->isInlineField($a)) {            continue;        }                $var = $engine->getVariableDescriptive($a);        $id = "" . $answernumbers[strtoupper($a)];        $answertype = $var->getAnswerType();        if ($answertype == ANSWER_TYPE_NONE) {            continue;        }                if (inArray($answertype, array(ANSWER_TYPE_SETOFENUMERATED))) {            $id .= "_name[]";        } else if (inArray($answertype, array(ANSWER_TYPE_MULTIDROPDOWN))) {            $id .= "[]";        }        $ans = $engine->getAnswer($a);        $selected = "";        if (strtoupper($ans) == "RF") {            $selected = "selected";        }        $str .= "<option " . $selected . " value='" . $id . "'>" . $a . " (" . substr($var->getQuestion(), 0, 40) . ")</option>";    }    $str .= "</select></td>";    $str .= "</tr></table></center><br/><br/>";    foreach ($displayed as $a) {        $var = $engine->getVariableDescriptive($a);        $ans = $engine->getAnswer($a);        if (!inArray($ans, array(ANSWER_DK, ANSWER_RF, ANSWER_NA))) {            $ans = "";        }        else {            $scripts[] = "<script type='text/javascript'>                            $(document).ready(function() {                                $('[name=\"answer" . $answernumbers[strtoupper($a)] . "\"]').addClass(\"dkrfna\");                            });                             </script>";        }        $id = "dkrf_answer" . $answernumbers[strtoupper($a)];        $id2 = $id;        $answertype = $var->getAnswerType();        if ($answertype == ANSWER_TYPE_NONE) {            continue;        }                if (inArray($answertype, array(ANSWER_TYPE_SETOFENUMERATED))) {            $id .= "_name[]";            $id2 .= "";        } else if (inArray($answertype, array(ANSWER_TYPE_MULTIDROPDOWN))) {            $id .= "[]";            $id2 .= "";        }        $str .= "<input type=hidden name='" . $id2 . "' id='" . $id2 . "' value='" . $ans . "'/ >";    }        // add select scripts    $str .= implode("", $scripts);    // add deselect dk/rf    $str .= "<script type='text/javascript'>";    foreach ($displayed as $a) {        $var = $engine->getVariableDescriptive($a);        $id = "dkrf_answer" . $answernumbers[strtoupper($a)];        $id2 = $id;        $answertype = $var->getAnswerType();        if ($answertype == ANSWER_TYPE_NONE) {            continue;        }                if (inArray($answertype, array(ANSWER_TYPE_SETOFENUMERATED))) {            $id .= "_name[]";            $id2 .= "";        } else if (inArray($answertype, array(ANSWER_TYPE_MULTIDROPDOWN))) {            $id .= "[]";            $id2 .= "";        }        $str .= "$('[name=\"answer" . str_replace("dkrf_answer", "", $id) . "\"]').change(function() {                    $('#" . $id2 . "').val('');                    $('#dk_list option[value=\"" . str_replace("dkrf_answer", "", $id) . "\"]').prop('selected', false);                                            $('#rf_list option[value=\"" . str_replace("dkrf_answer", "", $id) . "\"]').prop('selected', false);                                            $('#dk_list').selectpicker('refresh');                    $('#rf_list').selectpicker('refresh');                    $('[name=\"answer" . str_replace("dkrf_answer", "", str_replace("[", '\[', str_replace("]", '\]', $id))) . "\"]').removeClass(\"dkrfna\");                });";        if ($answertype == ANSWER_TYPE_SLIDER) {            $str .= "$('[id=\"answer" . str_replace("dkrf_answer", "", $id) . "_textbox\"]').keyup(function() {                    $('#" . $id2 . "').val('');                    $('#dk_list option[value=\"" . str_replace("dkrf_answer", "", $id) . "\"]').prop('selected', false);                                            $('#rf_list option[value=\"" . str_replace("dkrf_answer", "", $id) . "\"]').prop('selected', false);                                            $('#dk_list').selectpicker('refresh');                    $('#rf_list').selectpicker('refresh');                    $('[name=\"answer" . str_replace("dkrf_answer", "", str_replace("[", '\[', str_replace("]", '\]', $id))) . "\"]').removeClass(\"dkrfna\");                });";        }    }    $str .= "</script>";    // add dk/rf handling        $str .= "<script type='text/javascript'>";    $str .= "$('#dk_list').change(function() {                var array = ($(this).val() + '').split(',');                $('#dk_list option').each(function() {                    var val2 = $(this).val();                      var val3 = val2.replace('[','').replace(']','');                    val2 = val2.replace('[','\[').replace(']','\]');                    var type = $('[name=\"answer' + val2 + '\"]').attr('type');                    if (type == 'checkbox') {                        val3 = val3.replace('_name','');                    }                    if (jQuery.inArray(val2, array) != -1) {                                                                                        $('#dkrf_answer' + val3).val('DK');                        $('[name=\"answer' + val2 + '\"]').addClass(\"dkrfna\");                        $('#rf_list option[value=\"' + val2 + '\"]').prop('selected', false);                                                if (type == 'text') {                            if ($('[name=\"answer' + val2 + '\"]').hasClass('bootstrapslider')) {                                var x = $('[name=\"answer' + val2 + '\"]').slider();                                x.slider('setValue', '');                                $('[id=\"answer' + val2 + '_textbox\"]').val('');                            }                            else {                                $('[name=\"answer' + val2 + '\"]').val('');                                }                        }                        else if (type == 'radio') {                            if ($('[name=\"answer' + val2 + '\"]').hasClass('selectpicker')) {                                $('[name=\"answer' + val2 + '\"]').selectpicker(\"val\",\"\");                                $('[name=\"answer' + val2 + '\"]').selectpicker('refresh');                            }                            else {                                $('[name=\"answer' + val2 + '\"]').prop('checked', false);                            }                        }                          else if (type == 'checkbox') {                            $('[name=\"answer' + val2 + '\"]').removeAttr('checked');                        }                        else if ($('[name=\"answer' + val2 + '\"]').is('select')) {                            $('[name=\"answer' + val2 + '\"]').selectpicker(\"val\",\"\");                            $('[name=\"answer' + val2 + '\"]').selectpicker('refresh');                        }                    }                       else {                        if ($('#dkrf_answer' + val3).val() == 'DK') {                            $('[name=\"answer' + val2 + '\"]').removeClass(\"dkrfna\");                            $('#dkrf_answer' + val3).val('');                                                }                        }                });                $('#rf_list').selectpicker('refresh');            });";    $str .= "$('#rf_list').change(function() {                var array = ($(this).val() + '').split(',');                $('#rf_list option').each(function() {                    var val2 = $(this).val();                      var val3 = val2.replace('[','').replace(']','');                    val2 = val2.replace('[','\[').replace(']','\]');                    var type = $('[name=\"answer' + val2 + '\"]').attr('type');                    if (type == 'checkbox') {                        val3 = val3.replace('_name','');                    }                    if (jQuery.inArray(val2, array) != -1) {                                                                                        $('#dkrf_answer' + val3).val('RF');                        $('[name=\"answer' + val2 + '\"]').addClass(\"dkrfna\");                        $('#dk_list option[value=\"' + val2 + '\"]').prop('selected', false);                                                if (type == 'text') {                            if ($('[name=\"answer' + val2 + '\"]').hasClass('bootstrapslider')) {                                var x = $('[name=\"answer' + val2 + '\"]').slider();                                x.slider('setValue', '');                                $('[id=\"answer' + val2 + '_textbox\"]').val('');                            }                            else {                                $('[name=\"answer' + val2 + '\"]').val('');                                }                        }                        else if (type == 'radio') {                            if ($('[name=\"answer' + val2 + '\"]').hasClass('selectpicker')) {                                $('[name=\"answer' + val2 + '\"]').selectpicker(\"val\",\"\");                                $('[name=\"answer' + val2 + '\"]').selectpicker('refresh');                            }                            else {                                $('[name=\"answer' + val2 + '\"]').prop('checked', false);                            }                        }                          else if (type == 'checkbox') {                            $('[name=\"answer' + val2 + '\"]').removeAttr('checked');                        }                        else if ($('[name=\"answer' + val2 + '\"]').is('select')) {                            $('[name=\"answer' + val2 + '\"]').selectpicker(\"val\",\"\");                            $('[name=\"answer' + val2 + '\"]').selectpicker('refresh');                        }                    }                       else {                        if ($('#dkrf_answer' + val3).val() == 'RF') {                            $('[name=\"answer' + val2 + '\"]').removeClass(\"dkrfna\");                            $('#dkrf_answer' + val3).val('');                                                }                        }                });                $('#dk_list').selectpicker('refresh');            });";    $str .= "</script></div>";    return $str;}?>